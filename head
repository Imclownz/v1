// HEAD PROTECTION SYSTEM v3.0 (Ultimate Camouflage Edition)
class HeadProtectionSystem {
    constructor() {
        this.protectionEnabled = true;
        this.protectionMode = "dynamic";
        this.headHitboxOffset = { x: 0, y: -0.35, z: 0 };
        this.realHeadPosition = { x: 0, y: 0, z: 0 };
        this.sessionToken = "HPS_" + Date.now().toString(36);
        this.lastUpdate = Date.now();
        this.camouflageIntensity = 0.9; // Tăng độ ngụy trang
        this.adaptiveProtection = true;
    }

    process(body) {
        try {
            let data = JSON.parse(body);
            
            if (this.protectionEnabled && data.playerPosition) {
                this.realHeadPosition = this.calculateRealHeadPosition(data.playerPosition, data.playerStance);
                data.playerHeadPosition = this.generateFakeHeadPosition(data.playerPosition, data.playerStance);
                
                if (data.playerHitboxes) {
                    data.playerHitboxes = this.maskRealHeadHitbox(data.playerHitboxes);
                }
                
                data.headProtection = {
                    active: true,
                    mode: this.protectionMode,
                    camouflage: this.camouflageIntensity,
                    security: {
                        token: this.sessionToken,
                        checksum: this.generateChecksum()
                    }
                };
            }
            
            return JSON.stringify(data);
        } catch (e) {
            console.error("[HEAD PROTECTION] Error:", e.message.substring(0, 20));
            return body;
        }
    }

    calculateRealHeadPosition(playerPosition, stance) {
        let yOffset = 0.95;
        if (stance === 'crouching') yOffset = 0.70;
        else if (stance === 'prone') yOffset = 0.35;
        
        return {
            x: playerPosition.x,
            y: playerPosition.y + yOffset,
            z: playerPosition.z
        };
    }

    generateFakeHeadPosition(playerPosition, stance) {
        let fakePosition = { ...playerPosition };
        this.updateProtectionMode();
        
        if (this.protectionMode === "static") {
            fakePosition.y -= 0.40;
        } else if (this.protectionMode === "random") {
            fakePosition.x += (Math.random() * 0.6 - 0.3);
            fakePosition.y -= 0.25 + (Math.random() * 0.35);
            fakePosition.z += (Math.random() * 0.6 - 0.3);
        } else {
            const timeFactor = Date.now() / 800; // Tăng tốc độ di chuyển đầu giả
            fakePosition.x += Math.sin(timeFactor * 1.8) * 0.18;
            fakePosition.y -= 0.35 + Math.cos(timeFactor * 2.5) * 0.12;
            fakePosition.z += Math.cos(timeFactor * 1.5) * 0.18;
        }
        
        return fakePosition;
    }

    updateProtectionMode() {
        if (Date.now() - this.lastUpdate > 12000) { // Giảm thời gian chuyển đổi
            const modes = ["dynamic", "static", "random"];
            this.protectionMode = modes[Math.floor(Math.random() * modes.length)];
            this.camouflageIntensity = 0.75 + Math.random() * 0.25;
            this.lastUpdate = Date.now();
        }
    }

    maskRealHeadHitbox(hitboxes) {
        return hitboxes.map(hitbox => {
            if (hitbox.type === 'head') {
                return {
                    ...hitbox,
                    position: {
                        x: hitbox.position.x + (Math.random() * 0.25 - 0.125),
                        y: hitbox.position.y - 0.30,
                        z: hitbox.position.z + (Math.random() * 0.25 - 0.125)
                    },
                    radius: hitbox.radius * 0.65, // Thu nhỏ hitbox
                    camouflage: this.camouflageIntensity
                };
            }
            return hitbox;
        });
    }

    generateChecksum() {
        const crypto = require('crypto');
        const data = this.sessionToken + this.protectionMode;
        return crypto.createHash('sha256').update(data).digest('hex').substring(0, 16);
    }
}

const headProtection = new HeadProtectionSystem();
$done({ body: headProtection.process($response.body) });
