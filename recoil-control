// ULTIMATE RECOIL ELIMINATOR v6.0
class UltimateRecoilEliminator {
    constructor() {
        this.weaponProfiles = this.getWeaponProfiles();
        this.stabilityLevel = 1.0;
        this.crosshairStability = { x: 0, y: 0 };
        this.aimAssistLevel = 0;
        this.lastUpdate = 0;
    }

    process(body) {
        try {
            const data = JSON.parse(body);
            const weaponType = data.weaponType || 'default';
            const profile = this.weaponProfiles[weaponType] || this.weaponProfiles.default;
            
            if (data.gameState) {
                this.updateStability(data.gameState);
                this.updateCrosshairStability(data.gameState, weaponType);
            }
            
            if (data.aimSystem) {
                this.aimAssistLevel = data.aimSystem.lockStrength || 0;
            }
            
            data.recoilSystem = {
                version: "Recoil-Eliminator-6.0",
                horizontalCompensation: this.calculateHorizontalComp(profile),
                verticalCompensation: this.calculateVerticalComp(profile),
                crosshairStabilization: this.crosshairStability,
                stabilizationBoost: this.aimAssistLevel > 0.98 ? 1.5 : 1.0
            };
            
            if (data.gameState?.isFiring) {
                data.recoilSystem.fireStability = profile.fireStability * this.stabilityLevel;
            }
            
            return JSON.stringify(data);
        } catch (e) {
            console.error("[RECOIL ELIMINATOR] Error:", e.message);
            return body;
        }
    }

    calculateHorizontalComp(profile) {
        let comp = profile.horizontal * this.stabilityLevel;
        if (this.aimAssistLevel > 0.95) {
            comp *= (1 - (this.aimAssistLevel * 0.7));
        }
        return comp;
    }

    calculateVerticalComp(profile) {
        let comp = profile.vertical * this.stabilityLevel;
        if (this.aimAssistLevel > 0.95) {
            comp *= (1 - (this.aimAssistLevel * 0.9));
        }
        return comp;
    }

    updateCrosshairStability(gameState, weaponType) {
        const profile = this.weaponProfiles[weaponType] || this.weaponProfiles.default;
        let stability = profile.baseStability || 1.0;
        
        if (gameState.stance === 'crouching') stability *= 1.8;
        else if (gameState.stance === 'prone') stability *= 2.2;
        
        if (gameState.isMoving) stability *= 0.65;
        if (gameState.isSprinting) stability *= 0.35;
        
        if (gameState.playerHealth < 30) stability *= 0.8;
        
        this.crosshairStability = {
            x: stability * 0.08,
            y: stability * 0.12
        };
    }

    updateStability(gameState) {
        if (Date.now() - this.lastUpdate < 150) return;
        this.lastUpdate = Date.now();
        
        let stability = 1.0;
        
        if (gameState.stance === 'crouching') stability *= 1.7;
        else if (gameState.stance === 'prone') stability *= 2.0;
        
        if (gameState.isMoving) stability *= 0.7;
        if (gameState.isSprinting) stability *= 0.45;
        
        this.stabilityLevel = Math.max(0.4, Math.min(2.0, stability));
    }

    getWeaponProfiles() {
        return {
            default: {
                horizontal: 0.04, vertical: 0.07,
                fireStability: 0.95, baseStability: 1.0
            },
            sniper: {
                horizontal: 0.01, vertical: 0.10,
                fireStability: 0.99, baseStability: 1.5
            },
            ak47: {
                horizontal: 0.07, vertical: 0.12,
                fireStability: 0.90, baseStability: 0.9
            },
            m4a1: {
                horizontal: 0.05, vertical: 0.08,
                fireStability: 0.93, baseStability: 1.1
            }
        };
    }
}

const recoilSystem = new UltimateRecoilEliminator();
$done({ body: recoilSystem.process($response.body) });
