// ULTIMATE RECOIL STABILIZER v6.0 (Headshot Precision Edition)
class UltimateRecoilStabilizer {
    constructor() {
        this.weaponDatabase = this.getEnhancedWeaponDatabase();
        this.sessionToken = "URS_" + Date.now().toString(36);
        this.stabilityLevel = 1.2; // Tăng độ ổn định ban đầu
        this.crosshairStability = { x: 0, y: 0, z: 0 };
        this.aimAssistLevel = 0;
        this.weaponMemory = {};
        this.recoilPatterns = this.getPreciseRecoilPatterns();
        this.lastStabilityUpdate = 0;
        this.ultraStabilizationMode = false;
        this.gameState = null;
    }

    process(body) {
        try {
            const startTime = Date.now();
            let data = JSON.parse(body);
            const weaponType = data.weaponType || 'default';
            const profile = this.weaponDatabase[weaponType] || this.weaponDatabase.default;
            
            this.gameState = data.gameState || this.gameState;
            this.ultraStabilizationMode = data.aimSystem?.lockStrength > 0.985;
            
            if (data.gameState) {
                this.updateStability(data.gameState);
                this.updateCrosshairStability(data.gameState, weaponType);
            }
            
            if (data.aimSystem) {
                this.aimAssistLevel = data.aimSystem.lockStrength || 0;
            }
            
            data.recoilSystem = {
                version: "Stabilizer-6.0",
                horizontalCompensation: this.calculateHorizontalComp(profile),
                verticalCompensation: this.calculateVerticalComp(profile),
                crosshairStabilization: this.crosshairStability,
                patternElimination: "adaptive_ai",
                smoothingFactor: this.calculateDynamicSmoothing(profile),
                ultraStabilization: this.ultraStabilizationMode,
                security: {
                    token: this.sessionToken,
                    checksum: this.generateChecksum()
                },
                weaponProfile: this.getWeaponMemory(weaponType),
                processingTime: Date.now() - startTime
            };
            
            if (data.gameState?.isFiring) {
                const fireStability = this.calculateFireStability(profile);
                data.recoilSystem.crosshairStabilization = {
                    x: this.crosshairStability.x * profile.firingStabilityX * fireStability,
                    y: this.crosshairStability.y * profile.firingStabilityY * fireStability,
                    z: this.crosshairStability.z * profile.firingStabilityZ * fireStability
                };
                
                this.updateWeaponMemory(weaponType, data.recoilSystem.crosshairStabilization);
            }
            
            return JSON.stringify(data);
        } catch (e) {
            console.error("[RECOIL STABILIZER] Fast Error:", e.message.substring(0, 30));
            return body;
        }
    }

    calculateDynamicSmoothing(profile) {
        const baseSmoothing = profile.smoothing;
        const assistFactor = this.aimAssistLevel * 0.20; // Tăng ảnh hưởng aim assist
        const stabilityFactor = this.stabilityLevel * 0.15;
        return Math.min(0.995, baseSmoothing + assistFactor + stabilityFactor);
    }

    calculateFireStability(profile) {
        let stability = profile.fireStability;
        
        if (this.ultraStabilizationMode) stability *= 1.5;
        else if (this.gameState?.playerHealth < 25) stability *= 1.35;
        
        return stability * this.stabilityLevel;
    }

    updateCrosshairStability(gameState, weaponType) {
        if (!gameState) return;
        
        const profile = this.weaponDatabase[weaponType] || this.weaponDatabase.default;
        let stability = profile.baseStability || 1.3;
        
        if (gameState.stance === 'crouching') stability *= 1.95;
        else if (gameState.stance === 'prone') stability *= 2.4;
        
        if (gameState.isMoving) stability *= 0.70;
        if (gameState.isSprinting) stability *= 0.40;
        
        if (gameState.playerHealth < 25) stability *= 0.80;
        
        if (this.aimAssistLevel > 0.98) stability *= 1.4;
        
        this.crosshairStability = {
            x: stability * 0.09,
            y: stability * 0.14,
            z: stability * 0.03
        };
    }

    updateStability(gameState) {
        if (!gameState || Date.now() - this.lastStabilityUpdate < 120) return;
        this.lastStabilityUpdate = Date.now();
        
        let stability = 1.2;
        
        if (gameState.stance === 'crouching') stability *= 1.8;
        else if (gameState.stance === 'prone') stability *= 2.2;
        
        if (gameState.isMoving) stability *= 0.70;
        if (gameState.isSprinting) stability *= 0.45;
        
        if (gameState.playerHealth < 25) stability *= 0.80;
        
        this.stabilityLevel = Math.max(0.4, Math.min(2.8, stability));
    }

    calculateHorizontalComp(profile) {
        let comp = profile.horizontal * this.stabilityLevel * (1 - (this.aimAssistLevel * 0.70));
        return this.ultraStabilizationMode ? comp * 0.55 : comp;
    }

    calculateVerticalComp(profile) {
        let comp = profile.vertical * this.stabilityLevel * (1 - (this.aimAssistLevel * 0.90));
        return this.ultraStabilizationMode ? comp * 0.50 : comp;
    }

    getEnhancedWeaponDatabase() {
        return {
            default: {
                horizontal: 0.030, vertical: 0.060, smoothing: 0.98,
                fireStability: 0.99, baseStability: 1.3,
                firingStabilityX: 0.94, firingStabilityY: 0.88, firingStabilityZ: 0.97
            },
            sniper: {
                horizontal: 0.005, vertical: 0.090, smoothing: 0.998,
                fireStability: 0.9995, baseStability: 1.9,
                firingStabilityX: 0.99, firingStabilityY: 0.97, firingStabilityZ: 0.998
            },
            ak47: {
                horizontal: 0.060, vertical: 0.120, smoothing: 0.92,
                fireStability: 0.95, baseStability: 1.0,
                firingStabilityX: 0.82, firingStabilityY: 0.72, firingStabilityZ: 0.90
            },
            m4a1: {
                horizontal: 0.045, vertical: 0.080, smoothing: 0.96,
                fireStability: 0.98, baseStability: 1.1,
                firingStabilityX: 0.89, firingStabilityY: 0.80, firingStabilityZ: 0.95
            }
        };
    }

    updateWeaponMemory(weaponType, stability) {
        if (!this.weaponMemory[weaponType]) {
            this.weaponMemory[weaponType] = {
                usageCount: 0,
                lastUsed: Date.now(),
                avgStability: stability
            };
        }
        
        const memory = this.weaponMemory[weaponType];
        memory.usageCount++;
        memory.lastUsed = Date.now();
        
        memory.avgStability = {
            x: (memory.avgStability.x * (memory.usageCount - 1) + stability.x) / memory.usageCount,
            y: (memory.avgStability.y * (memory.usageCount - 1) + stability.y) / memory.usageCount,
            z: (memory.avgStability.z * (memory.usageCount - 1) + stability.z) / memory.usageCount
        };
    }

    getWeaponMemory(weaponType) {
        return this.weaponMemory[weaponType] || {
            usageCount: 0,
            lastUsed: 0,
            avgStability: { x: 0, y: 0, z: 0 }
        };
    }

    generateChecksum() {
        const crypto = require('crypto');
        const data = this.sessionToken + this.stabilityLevel;
        return crypto.createHash('sha256').update(data).digest('hex').substring(0, 16);
    }

    getPreciseRecoilPatterns() {
        return {
            default: {
                default: [0.05, 0.11, 0.020, -0.05, -0.020, 0.08],
                lock_mode: [0.015, 0.05, 0.005, -0.015, -0.005, 0.025]
            },
            sniper: {
                default: [0.005, 0.18, 0.005, -0.005, -0.005, 0.008],
                lock_mode: [0.001, 0.07, 0.001, -0.001, -0.001, 0.004]
            },
            ak47: {
                default: [0.14, 0.25, 0.09, -0.09, -0.05, 0.17],
                lock_mode: [0.05, 0.09, 0.03, -0.04, -0.02, 0.07]
            },
            m4a1: {
                default: [0.09, 0.16, 0.04, -0.07, -0.04, 0.11],
                lock_mode: [0.03, 0.06, 0.015, -0.025, -0.015, 0.04]
            }
        };
    }
}

const recoilSystem = new UltimateRecoilStabilizer();
$done({ body: recoilSystem.process($response.body) });
