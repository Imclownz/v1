// ULTIMATE RECOIL STABILIZER v5.0 (Precision Edition)
class UltimateRecoilStabilizer {
    constructor() {
        this.weaponDatabase = this.getEnhancedWeaponDatabase();
        this.sessionToken = "URS_" + Date.now().toString(36);
        this.stabilityLevel = 1.0;
        this.crosshairStability = { x: 0, y: 0, z: 0 };
        this.aimAssistLevel = 0;
        this.weaponMemory = {};
        this.recoilPatterns = this.getPreciseRecoilPatterns();
        this.lastStabilityUpdate = 0;
        this.ultraStabilizationMode = false;
        this.gameState = null;
    }

    process(body) {
        try {
            const startTime = Date.now();
            let data = JSON.parse(body);
            const weaponType = data.weaponType || 'default';
            const profile = this.weaponDatabase[weaponType] || this.weaponDatabase.default;
            
            this.gameState = data.gameState || this.gameState;
            this.ultraStabilizationMode = data.aimSystem?.lockStrength > 0.98;
            
            if (data.gameState) {
                this.updateStability(data.gameState);
                this.updateCrosshairStability(data.gameState, weaponType);
            }
            
            if (data.aimSystem) {
                this.aimAssistLevel = data.aimSystem.lockStrength || 0;
            }
            
            data.recoilSystem = {
                version: "Stabilizer-5.0",
                horizontalCompensation: this.calculateHorizontalComp(profile),
                verticalCompensation: this.calculateVerticalComp(profile),
                crosshairStabilization: this.crosshairStability,
                patternElimination: "adaptive_ai",
                smoothingFactor: this.calculateDynamicSmoothing(profile),
                ultraStabilization: this.ultraStabilizationMode,
                security: {
                    token: this.sessionToken,
                    checksum: this.generateChecksum()
                },
                weaponProfile: this.getWeaponMemory(weaponType),
                processingTime: Date.now() - startTime
            };
            
            if (data.gameState?.isFiring) {
                const fireStability = this.calculateFireStability(profile);
                data.recoilSystem.crosshairStabilization = {
                    x: this.crosshairStability.x * profile.firingStabilityX * fireStability,
                    y: this.crosshairStability.y * profile.firingStabilityY * fireStability,
                    z: this.crosshairStability.z * profile.firingStabilityZ * fireStability
                };
                
                this.updateWeaponMemory(weaponType, data.recoilSystem.crosshairStabilization);
            }
            
            return JSON.stringify(data);
        } catch (e) {
            console.error("[RECOIL STABILIZER] Fast Error:", e.message.substring(0, 30));
            return body;
        }
    }

    calculateDynamicSmoothing(profile) {
        const baseSmoothing = profile.smoothing;
        const assistFactor = this.aimAssistLevel * 0.15;
        const stabilityFactor = this.stabilityLevel * 0.1;
        return Math.min(0.99, baseSmoothing + assistFactor + stabilityFactor);
    }

    calculateFireStability(profile) {
        let stability = profile.fireStability;
        
        if (this.ultraStabilizationMode) {
            stability *= 1.4;
        }
        else if (this.gameState?.playerHealth < 30) {
            stability *= 1.25;
        }
        
        return stability * this.stabilityLevel;
    }

    updateCrosshairStability(gameState, weaponType) {
        if (!gameState) return;
        
        const profile = this.weaponDatabase[weaponType] || this.weaponDatabase.default;
        let stability = profile.baseStability || 1.0;
        
        if (gameState.stance === 'crouching') stability *= 1.85;
        else if (gameState.stance === 'prone') stability *= 2.3;
        
        if (gameState.isMoving) stability *= 0.65;
        if (gameState.isSprinting) stability *= 0.35;
        
        if (gameState.playerHealth < 30) stability *= 0.75;
        
        if (this.aimAssistLevel > 0.97) stability *= 1.3;
        
        this.crosshairStability = {
            x: stability * 0.08,
            y: stability * 0.12,
            z: stability * 0.02
        };
    }

    updateStability(gameState) {
        if (!gameState || Date.now() - this.lastStabilityUpdate < 150) return;
        this.lastStabilityUpdate = Date.now();
        
        let stability = 1.0;
        
        if (gameState.stance === 'crouching') stability *= 1.7;
        else if (gameState.stance === 'prone') stability *= 2.1;
        
        if (gameState.isMoving) stability *= 0.65;
        if (gameState.isSprinting) stability *= 0.4;
        
        if (gameState.playerHealth < 30) stability *= 0.75;
        
        this.stabilityLevel = Math.max(0.3, Math.min(2.6, stability));
    }

    calculateHorizontalComp(profile) {
        let comp = profile.horizontal * this.stabilityLevel * (1 - (this.aimAssistLevel * 0.65));
        return this.ultraStabilizationMode ? comp * 0.6 : comp;
    }

    calculateVerticalComp(profile) {
        let comp = profile.vertical * this.stabilityLevel * (1 - (this.aimAssistLevel * 0.85));
        return this.ultraStabilizationMode ? comp * 0.55 : comp;
    }

    getEnhancedWeaponDatabase() {
        return {
            default: {
                horizontal: 0.035, vertical: 0.065, smoothing: 0.97,
                fireStability: 0.985, baseStability: 1.2,
                firingStabilityX: 0.92, firingStabilityY: 0.85, firingStabilityZ: 0.96
            },
            sniper: {
                horizontal: 0.007, vertical: 0.095, smoothing: 0.995,
                fireStability: 0.999, baseStability: 1.85,
                firingStabilityX: 0.98, firingStabilityY: 0.96, firingStabilityZ: 0.995
            },
            ak47: {
                horizontal: 0.065, vertical: 0.125, smoothing: 0.91,
                fireStability: 0.94, baseStability: 0.95,
                firingStabilityX: 0.80, firingStabilityY: 0.70, firingStabilityZ: 0.88
            },
            m4a1: {
                horizontal: 0.048, vertical: 0.085, smoothing: 0.95,
                fireStability: 0.97, baseStability: 1.08,
                firingStabilityX: 0.87, firingStabilityY: 0.78, firingStabilityZ: 0.94
            }
        };
    }

    updateWeaponMemory(weaponType, stability) {
        if (!this.weaponMemory[weaponType]) {
            this.weaponMemory[weaponType] = {
                usageCount: 0,
                lastUsed: Date.now(),
                avgStability: stability
            };
        }
        
        const memory = this.weaponMemory[weaponType];
        memory.usageCount++;
        memory.lastUsed = Date.now();
        
        memory.avgStability = {
            x: (memory.avgStability.x * (memory.usageCount - 1) + stability.x) / memory.usageCount,
            y: (memory.avgStability.y * (memory.usageCount - 1) + stability.y) / memory.usageCount,
            z: (memory.avgStability.z * (memory.usageCount - 1) + stability.z) / memory.usageCount
        };
    }

    getWeaponMemory(weaponType) {
        return this.weaponMemory[weaponType] || {
            usageCount: 0,
            lastUsed: 0,
            avgStability: { x: 0, y: 0, z: 0 }
        };
    }

    generateChecksum() {
        const crypto = require('crypto');
        const data = this.sessionToken + this.stabilityLevel;
        return crypto.createHash('sha256').update(data).digest('hex').substring(0, 16);
    }

    getPreciseRecoilPatterns() {
        return {
            default: {
                default: [0.06, 0.12, 0.025, -0.06, -0.025, 0.09],
                lock_mode: [0.02, 0.06, 0.006, -0.02, -0.006, 0.03]
            },
            sniper: {
                default: [0.006, 0.20, 0.006, -0.006, -0.006, 0.01],
                lock_mode: [0.001, 0.08, 0.001, -0.001, -0.001, 0.005]
            },
            ak47: {
                default: [0.15, 0.26, 0.10, -0.10, -0.06, 0.18],
                lock_mode: [0.06, 0.10, 0.04, -0.05, -0.03, 0.08]
            },
            m4a1: {
                default: [0.10, 0.17, 0.05, -0.08, -0.05, 0.12],
                lock_mode: [0.04, 0.07, 0.02, -0.03, -0.02, 0.05]
            }
        };
    }
}

const recoilSystem = new UltimateRecoilStabilizer();
$done({ body: recoilSystem.process($response.body) });
