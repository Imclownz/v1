// smart-performance-manager.js
class SmartPerformanceManager {
    constructor() {
        this.modules = {
            aim: { active: true, priority: 1, cpuBudget: 0.2 },
            recoil: { active: true, priority: 2, cpuBudget: 0.15 },
            network: { active: true, priority: 3, cpuBudget: 0.1 },
            graphics: { active: true, priority: 4, cpuBudget: 0.25 }
        };
        this.lastAdjustment = Date.now();
        this.deviceProfile = this.detectDeviceProfile();
        this.gameState = null;
        this.performanceStats = {
            avgCpu: 0,
            avgMemory: 0,
            samples: 0
        };
    }

    process(body) {
        try {
            let data = JSON.parse(body);
            this.gameState = data.gameState || this.gameState;
            
            // Cập nhật thống kê hiệu năng
            this.updatePerformanceStats(data.performanceState);
            
            // Điều chỉnh module mỗi 5 giây hoặc khi có thay đổi lớn
            if (Date.now() - this.lastAdjustment > 5000 || 
                (data.performanceState && data.performanceState.cpuUsage > 0.8)) {
                this.adjustModules();
                this.lastAdjustment = Date.now();
            }
            
            data.performance = {
                timestamp: Date.now(),
                deviceProfile: this.deviceProfile,
                moduleAllocations: this.getModuleAllocations(),
                recommendations: this.getRecommendations(),
                stats: {
                    avgCpu: this.performanceStats.avgCpu,
                    avgMemory: this.performanceStats.avgMemory
                }
            };

            return JSON.stringify(data);
        } catch (e) {
            console.error("[PERF MANAGER] Error:", e.message.substring(0, 20));
            return body;
        }
    }

    updatePerformanceStats(performanceState) {
        if (!performanceState) return;
        
        // Cập nhật trung bình di động
        const weight = 0.2; // Hệ số làm mịn
        this.performanceStats.avgCpu = this.performanceStats.avgCpu * (1 - weight) + performanceState.cpuUsage * weight;
        this.performanceStats.avgMemory = this.performanceStats.avgMemory * (1 - weight) + performanceState.memoryUsage * weight;
        this.performanceStats.samples++;
    }

    detectDeviceProfile() {
        // Phát hiện profile thiết bị dựa trên thông số hiệu năng
        if (this.performanceStats.samples < 5) return "unknown";
        
        if (this.performanceStats.avgCpu < 0.4 && this.performanceStats.avgMemory < 50) {
            return "high_end";
        } else if (this.performanceStats.avgCpu < 0.6 && this.performanceStats.avgMemory < 70) {
            return "mid_range";
        } else {
            return "low_end";
        }
    }

    adjustModules() {
        // Điều chỉnh dựa trên profile thiết bị
        switch (this.deviceProfile) {
            case "high_end":
                this.setModuleBudgets(0.25, 0.2, 0.15, 0.3);
                break;
            case "mid_range":
                this.setModuleBudgets(0.2, 0.15, 0.1, 0.25);
                break;
            case "low_end":
                this.setModuleBudgets(0.15, 0.1, 0.08, 0.2);
                // Tắt module không cần thiết
                this.modules.graphics.active = false;
                break;
            default:
                this.setModuleBudgets(0.2, 0.15, 0.1, 0.25);
        }
        
        // Ưu tiên tài nguyên cho hệ thống aim khi khóa mục tiêu
        if (this.gameState?.isTargetLocked) {
            this.modules.aim.cpuBudget = Math.min(0.3, this.modules.aim.cpuBudget + 0.05);
            this.modules.recoil.cpuBudget = Math.min(0.2, this.modules.recoil.cpuBudget + 0.03);
            this.modules.graphics.cpuBudget = Math.max(0.1, this.modules.graphics.cpuBudget - 0.08);
        }
        
        // Giảm tải khi hiệu năng thấp
        if (this.performanceStats.avgCpu > 0.7) {
            this.modules.graphics.cpuBudget *= 0.7;
            this.modules.network.cpuBudget *= 0.8;
        }
    }

    setModuleBudgets(aim, recoil, network, graphics) {
        this.modules.aim.cpuBudget = aim;
        this.modules.recoil.cpuBudget = recoil;
        this.modules.network.cpuBudget = network;
        this.modules.graphics.cpuBudget = graphics;
    }

    getModuleAllocations() {
        return Object.entries(this.modules).map(([name, config]) => ({
            module: name,
            active: config.active,
            cpuBudget: config.cpuBudget.toFixed(2)
        }));
    }

    getRecommendations() {
        const totalCpu = Object.values(this.modules)
            .filter(m => m.active)
            .reduce((sum, m) => sum + m.cpuBudget, 0);
        
        let status = "optimal";
        let actions = [];
        
        if (totalCpu > 0.9 || this.performanceStats.avgCpu > 0.85) {
            status = "critical";
            actions = ["reduce_graphics", "disable_non_essential"];
        } else if (totalCpu > 0.7 || this.performanceStats.avgCpu > 0.7) {
            status = "high";
            actions = ["reduce_graphics"];
        } else if (totalCpu > 0.5 || this.performanceStats.avgCpu > 0.6) {
            status = "moderate";
            actions = ["optimize_settings"];
        } else {
            status = "optimal";
            actions = ["none"];
        }
        
        return {
            status,
            actions,
            totalCpu: totalCpu.toFixed(2)
        };
    }
}

const perfManager = new SmartPerformanceManager();
$done({ body: perfManager.process($response.body) });
