// PERFECTLOCK HEADSHOT MASTER v10.5 (Free Fire Edition)
class PerfectLockHeadshotMaster {
    constructor() {
        this.lockStrength = 0.9999;
        this.targetHistory = new Map();
        this.sessionToken = `FFHS_${Date.now().toString(36)}`;
        this.weaponProfiles = this.getFreeFireWeaponProfiles();
        this.lastLockTime = 0;
        this.aimPredictionLevel = 8;
        this.aimStabilizer = 0.995;
        this.overshootProtection = 0.92; // Giảm overshoot
        this.stickyFactor = 0.97; // Tăng độ dính
        this.freeFirePhysics = {
            gravity: 9.8,
            bulletVelocity: 400,
            headMovementFactor: 1.35
        };
    }

    process(body) {
        try {
            const startTime = performance.now();
            const data = JSON.parse(body);
            
            if (data.targets?.length > 0) {
                const enhancedTargets = this.applyFreeFireTargetFilter(data.targets);
                const lockedTarget = this.selectFreeFirePriorityTarget(enhancedTargets);
                
                if (lockedTarget) {
                    // Tính toán điểm bắn tối ưu cho Free Fire
                    const perfectAim = this.calculateFreeFireHeadshot(
                        lockedTarget, 
                        data.playerPosition,
                        data.currentWeapon
                    );
                    
                    // Áp dụng cơ chế bám đầu đặc biệt
                    data.aimPosition = this.applyFreeFireStickyLock(
                        perfectAim, 
                        data.currentAimPosition, 
                        lockedTarget
                    );
                    
                    // Tự động bắn khi khóa chắc
                    if (this.lockStrength > 0.99) {
                        data.autoFire = true;
                        data.fireMode = "headshot_burst";
                    }
                    
                    // Ghi nhận lịch sử mục tiêu
                    this.updateTargetHistory(lockedTarget.id, perfectAim);
                }
                
                data.aimData = {
                    targets: enhancedTargets,
                    lockedTarget,
                    lockStrength: this.lockStrength,
                    predictionLevel: this.aimPredictionLevel,
                    processingTime: performance.now() - startTime
                };
            }
            
            // Cập nhật trạng thái
            if (data.gameState) this.updateCombatState(data.gameState);
            
            data.aimSystem = {
                version: "10.5",
                mode: "freefire_headshot",
                security: {
                    token: this.sessionToken,
                    checksum: this.generateChecksum()
                }
            };
            
            return JSON.stringify(data);
        } catch (e) {
            console.error("[HEADSHOT MASTER] FreeFire Error:", e.message.substring(0,25));
            return body;
        }
    }

    // CƠ CHẾ BÁM ĐẦU ĐẶC BIỆT CHO FREE FIRE
    applyFreeFireStickyLock(targetPosition, currentPosition, target) {
        const direction = {
            x: targetPosition.x - currentPosition.x,
            y: targetPosition.y - currentPosition.y,
            z: targetPosition.z - currentPosition.z
        };
        
        const distance = Math.max(1, target.distance);
        const distanceFactor = Math.min(1.15, 120 / distance);
        const speedFactor = 1.1 - (Math.hypot(target.movement.x, target.movement.y) * 0.02);
        
        // Tính toán vị trí cuối cùng với độ dính cao
        let finalPosition = {
            x: currentPosition.x + (direction.x * distanceFactor * speedFactor * this.stickyFactor * this.overshootProtection),
            y: currentPosition.y + (direction.y * distanceFactor * speedFactor * this.stickyFactor * this.aimStabilizer * this.overshootProtection),
            z: currentPosition.z + (direction.z * distanceFactor * speedFactor * this.stickyFactor * 0.96 * this.overshootProtection)
        };
        
        // Giới hạn không vượt quá hitbox đầu
        finalPosition.x = Math.min(target.headHitbox.x * 1.03, 
                                Math.max(target.headHitbox.x * 0.97, finalPosition.x));
        finalPosition.y = Math.min(target.headHitbox.y * 1.03, 
                                Math.max(target.headHitbox.y * 0.97, finalPosition.y));
        finalPosition.z = Math.min(target.headHitbox.z * 1.03, 
                                Math.max(target.headHitbox.z * 0.97, finalPosition.z));
        
        return finalPosition;
    }

    // TÍNH TOÁN HEADSHOT CHUẨN FREE FIRE
    calculateFreeFireHeadshot(target, playerPosition, weaponType) {
        const weaponProfile = this.weaponProfiles[weaponType] || this.weaponProfiles.default;
        const distance = Math.max(1, target.distance);
        const travelTime = distance / weaponProfile.bulletVelocity;
        
        // Dự đoán vị trí đầu với độ chính xác cao
        const predictedPosition = {
            x: target.headHitbox.x + (target.movement.x * travelTime * this.freeFirePhysics.headMovementFactor),
            y: target.headHitbox.y + (target.movement.y * travelTime * this.freeFirePhysics.headMovementFactor),
            z: target.headHitbox.z + (target.movement.z * travelTime * this.freeFirePhysics.headMovementFactor)
        };
        
        // Hiệu chỉnh trọng lực Free Fire
        const gravityOffset = 0.5 * this.freeFirePhysics.gravity * travelTime * travelTime;
        predictedPosition.y -= gravityOffset * 0.85;
        
        // Hiệu chỉnh cuối cùng
        return {
            x: predictedPosition.x,
            y: predictedPosition.y + target.headHitboxSize * 0.65, // Tối ưu vị trí headshot
            z: predictedPosition.z
        };
    }

    // LỌC MỤC TIÊU THEO CƠ CHẾ FREE FIRE
    applyFreeFireTargetFilter(targets) {
        return targets
            .filter(target => target.health > 0 && target.isVisible)
            .sort((a, b) => {
                // Ưu tiên: khoảng cách gần + kích thước đầu lớn + ít di chuyển
                const aPriority = (100 - a.distance) + (a.headHitboxSize * 50) - (a.movementSpeed * 10);
                const bPriority = (100 - b.distance) + (b.headHitboxSize * 50) - (b.movementSpeed * 10);
                return bPriority - aPriority;
            });
    }

    // CẬP NHẬT TRẠNG THÁI CHIẾN ĐẤU
    updateCombatState(gameState) {
        if (gameState.isInCombat) {
            this.lockStrength = Math.min(0.9999, 0.995 + (gameState.combatIntensity * 0.004));
            this.aimPredictionLevel = 9; // Tăng độ chính xác khi giao chiến
        } else {
            this.lockStrength = Math.max(0.985, this.lockStrength - 0.001);
        }
        
        if (gameState.playerHealth < 30) {
            this.lockStrength = 0.9995;
            this.overshootProtection = 0.98; // Giảm overshoot khi máu thấp
        }
    }

    // CẬP NHẬT LỊCH SỬ MỤC TIÊU
    updateTargetHistory(targetId, position) {
        if (!this.targetHistory.has(targetId)) {
            this.targetHistory.set(targetId, []);
        }
        
        const history = this.targetHistory.get(targetId);
        history.push({position, timestamp: performance.now()});
        
        // Giới hạn lịch sử
        if (history.length > 10) history.shift();
    }

    getFreeFireWeaponProfiles() {
        return {
            default: {bulletVelocity: 380, stability: 0.95},
            sniper: {bulletVelocity: 950, stability: 0.99},
            ak47: {bulletVelocity: 360, stability: 0.92},
            m4a1: {bulletVelocity: 400, stability: 0.94},
            shotgun: {bulletVelocity: 300, stability: 0.85}
        };
    }

    generateChecksum() {
        const crypto = require('crypto');
        return crypto.createHash('sha256').update(this.sessionToken).digest('hex').substring(0,16);
    }
}

const aimSystem = new PerfectLockHeadshotMaster();
$done({ body: aimSystem.process($response.body) });
