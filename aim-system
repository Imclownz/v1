// HEADSHOT PRO v12.0 (Free Fire Headshot Engine)
class HeadshotPro {
    constructor() {
        this.lockStrength = 0.9999;
        this.targetHistory = new Map();
        this.sessionToken = `HS12_${Date.now().toString(36)}`;
        this.weaponProfiles = this.getWeaponProfiles();
        this.aimPredictionLevel = 9;
        this.stickyFactor = 0.98; // Tăng độ dính
        this.overshootGuard = 0.85; // Giảm mạnh overshoot
        this.extendedHitbox = 0.18; // Mở rộng vùng headshot
        
        // Cấu hình đặc thù Free Fire
        this.freeFireConfig = {
            headRadius: 0.35,
            neckOffset: 0.22,
            gravity: 9.8,
            bulletVelocity: 400,
            headMovementFactor: 1.25
        };
    }

    process(body) {
        try {
            const startTime = performance.now();
            const data = JSON.parse(body);
            
            if (data.targets?.length > 0) {
                const enhancedTargets = this.applyTargetFilter(data.targets);
                const lockedTarget = this.selectPriorityTarget(enhancedTargets);
                
                if (lockedTarget) {
                    // TÍNH TOÁN HEADSHOT TỐI ƯU
                    data.aimPosition = this.calculatePerfectHeadshot(
                        lockedTarget, 
                        data.playerPosition,
                        data.currentWeapon
                    );
                    
                    // KÍCH HOẠT HEADSHOT BURST
                    if (this.lockStrength > 0.99) {
                        data.autoFire = true;
                        data.fireMode = "headshot_guarantee";
                    }
                }
                
                data.aimData = {
                    targets: enhancedTargets,
                    lockedTarget,
                    lockStrength: this.lockStrength,
                    processingTime: performance.now() - startTime
                };
            }
            
            // CẬP NHẬT TRẠNG THÁI
            if (data.gameState) this.updateCombatState(data.gameState);
            
            data.aimSystem = {
                version: "12.0",
                mode: "headshot_pro",
                security: {
                    token: this.sessionToken,
                    checksum: this.generateChecksum()
                },
                hitboxExtension: this.extendedHitbox // Hiển thị vùng headshot mở rộng
            };
            
            return JSON.stringify(data);
        } catch (e) {
            console.error("[HEADSHOT PRO] Error:", e.message.substring(0,20));
            return body;
        }
    }

    // TÍNH TOÁN HEADSHOT HOÀN HẢO
    calculatePerfectHeadshot(target, playerPos, weapon) {
        const weaponProfile = this.weaponProfiles[weapon] || this.weaponProfiles.default;
        const travelTime = target.distance / weaponProfile.bulletVelocity;
        
        // DỰ ĐOÁN VỊ TRÍ ĐẦU CHÍNH XÁC
        const predictedHeadPos = this.predictHeadPosition(target, travelTime);
        
        // ÁP DỤNG HEADSHOT EXTENSION
        const extendedPosition = this.applyHitboxExtension(predictedHeadPos, target);
        
        // CƠ CHẾ BÁM TỨC THỜI
        return this.applyInstantLock(extendedPosition, playerPos, target);
    }

    // DỰ ĐOÁN VỊ TRÍ ĐẦU CHÍNH XÁC
    predictHeadPosition(target, travelTime) {
        // Bộ lọc chuyển động thời gian thực
        const filteredMovement = this.applyMovementFilter(target);
        
        return {
            x: target.headHitbox.x + (filteredMovement.x * travelTime * this.freeFireConfig.headMovementFactor),
            y: target.headHitbox.y + this.freeFireConfig.neckOffset + 
               (filteredMovement.y * travelTime * this.freeFireConfig.headMovementFactor),
            z: target.headHitbox.z + (filteredMovement.z * travelTime * this.freeFireConfig.headMovementFactor)
        };
    }

    // MỞ RỘNG VÙNG HEADSHOT
    applyHitboxExtension(position, target) {
        // Tính toán hướng mở rộng dựa trên chuyển động
        const extensionDirection = {
            x: target.movement.x > 0 ? 1 : -1,
            y: target.movement.y > 0 ? 1 : -1,
            z: target.movement.z > 0 ? 1 : -1
        };
        
        // Áp dụng vùng mở rộng
        return {
            x: position.x + (extensionDirection.x * this.extendedHitbox * 0.7),
            y: position.y + (extensionDirection.y * this.extendedHitbox * 0.9),
            z: position.z + (extensionDirection.z * this.extendedHitbox * 0.5)
        };
    }

    // CƠ CHẾ BÁM TỨC THỜI
    applyInstantLock(targetPos, currentPos, target) {
        const distance = Math.max(1, target.distance);
        const lockSpeed = Math.min(1.25, 0.5 + (100/distance)); // Tốc độ khóa theo khoảng cách
        
        // Tính toán vị trí khóa tức thời
        return {
            x: currentPos.x + (targetPos.x - currentPos.x) * lockSpeed * this.stickyFactor * this.overshootGuard,
            y: currentPos.y + (targetPos.y - currentPos.y) * lockSpeed * this.stickyFactor * this.overshootGuard,
            z: currentPos.z + (targetPos.z - currentPos.z) * lockSpeed * this.stickyFactor * this.overshootGuard * 0.95
        };
    }

    // BỘ LỌC CHUYỂN ĐỘNG THỜI GIAN THỰC
    applyMovementFilter(target) {
        const history = this.targetHistory.get(target.id) || [];
        if (history.length < 2) return target.movement;
        
        // Lọc nhiễu với thuật toán trung bình có trọng số
        let filteredX = 0, filteredY = 0, totalWeight = 0;
        
        for (let i = 0; i < history.length; i++) {
            const weight = 1.0 - (i * 0.15); // Giảm dần trọng số
            filteredX += history[i].movement.x * weight;
            filteredY += history[i].movement.y * weight;
            totalWeight += weight;
        }
        
        return {
            x: filteredX / totalWeight,
            y: filteredY / totalWeight,
            z: target.movement.z // Giữ nguyên trục Z
        };
    }

    // CẬP NHẬT TRẠNG THÁI CHIẾN ĐẤU
    updateCombatState(gameState) {
        // Tăng tốc độ khóa khi giao chiến
        if (gameState.isInCombat) {
            this.lockStrength = 0.9995;
            this.stickyFactor = 0.99;
            this.extendedHitbox = 0.22; // Mở rộng thêm vùng headshot
        }
        
        // Siêu khóa khi nguy hiểm
        if (gameState.playerHealth < 30) {
            this.lockStrength = 0.9999;
            this.stickyFactor = 0.995;
            this.extendedHitbox = 0.25;
        }
    }

    // BỘ LỌC MỤC TIÊU THÔNG MINH
    applyTargetFilter(targets) {
        return targets
            .filter(target => target.health > 0 && target.isVisible)
            .sort((a, b) => {
                // Điểm ưu tiên = Khoảng cách gần + Đầu to + Di chuyển chậm
                return (b.headHitboxSize * 50 - a.distance - a.movementSpeed * 5) - 
                       (a.headHitboxSize * 50 - b.distance - b.movementSpeed * 5);
            });
    }

    getWeaponProfiles() {
        return {
            default: {bulletVelocity: 380, stability: 0.95},
            sniper: {bulletVelocity: 950, stability: 0.99},
            ak47: {bulletVelocity: 360, stability: 0.92},
            m4a1: {bulletVelocity: 400, stability: 0.94},
            shotgun: {bulletVelocity: 300, stability: 0.85}
        };
    }

    generateChecksum() {
        const crypto = require('crypto');
        return crypto.createHash('sha256').update(this.sessionToken).digest('hex').substring(0,16);
    }
}

const aimSystem = new HeadshotPro();
$done({ body: aimSystem.process($response.body) });
