// HEADSHOT DOMINATOR v14.0 (200% Headshot Zone)
class HeadshotDominator {
    constructor() {
        this.lockStrength = 1.0; // Khóa chặt 100%
        this.targetHistory = new Map();
        this.sessionToken = `DOM_${Date.now().toString(36)}`;
        this.weaponProfiles = this.getDominatorWeaponProfiles();
        this.lastLockTime = 0;
        this.aimPredictionLevel = 11; // Độ chính xác cực cao
        this.headshotAreaMultiplier = 2.0; // Mở rộng 200% vùng headshot
        this.overshootCorrection = 0.75; // Giảm 25% overshoot
        this.chestStuckProtection = true; // Chống dính ngực
        this.autoLockMode = true; // Tự động khóa khi bắn
        this.bulletConvergence = true; // Tập trung đạn
        this.lockMaintainTime = 0; // Thời gian duy trì khóa

        // Cấu hình Free Fire
        this.freeFireConfig = {
            headRadius: 0.35,
            chestRadius: 0.6,
            gravity: 9.8,
            baseBulletVelocity: 400,
            headPriority: 10.0 // Độ ưu tiên headshot
        };
    }

    process(body) {
        try {
            const startTime = Date.now();
            const data = JSON.parse(body);
            
            // Kích hoạt chế độ auto lock khi bắn
            if (data.gameState?.isFiring) {
                this.autoLockMode = true;
                this.lockMaintainTime += 50; // Duy trì khóa thêm 50ms
            } else if (this.lockMaintainTime <= 0) {
                this.autoLockMode = false;
            } else {
                this.lockMaintainTime -= 33; // Giảm dần thời gian duy trì
            }
            
            if (data.targets?.length > 0) {
                const enhancedTargets = this.applyHeadPriorityFilter(data.targets, data.playerPosition);
                const lockedTarget = this.selectHeadPriorityTarget(enhancedTargets);
                
                if (lockedTarget && this.autoLockMode) {
                    // Tính toán điểm bắn headshot tối ưu
                    const perfectHeadshot = this.calculateDominatorAim(lockedTarget, data.playerPosition, data.currentWeapon);
                    
                    // Áp dụng cơ chế chống dính ngực
                    data.aimPosition = this.applyChestProtection(
                        perfectHeadshot, 
                        data.currentAimPosition, 
                        lockedTarget
                    );
                    
                    // Tập trung tất cả đạn vào đầu địch
                    if (this.bulletConvergence) {
                        data.bulletTrajectory = this.calculateBulletConvergence(
                            data.playerPosition,
                            perfectHeadshot,
                            lockedTarget
                        );
                    }
                    
                    // Cập nhật lịch sử khóa
                    this.lastLockTime = Date.now();
                    this.updateLockHistory(lockedTarget.id, perfectHeadshot);
                }
                
                data.aimData = {
                    targets: enhancedTargets,
                    lockedTarget,
                    lockStrength: this.lockStrength,
                    headshotArea: this.headshotAreaMultiplier,
                    autoLock: this.autoLockMode,
                    bulletConvergence: this.bulletConvergence,
                    processingTime: Date.now() - startTime
                };
            }
            
            data.aimSystem = this.getSystemStatus();
            return JSON.stringify(data);
        } catch (e) {
            console.error("[HEADSHOT DOMINATOR] Ultimate Error:", e.message.substring(0, 30));
            return body;
        }
    }

    // CƠ CHẾ HEADSHOT DOMINATOR: MỞ RỘNG 200% + TẬP TRUNG ĐẦU
    calculateDominatorAim(target, playerPos, weapon) {
        const weaponProfile = this.weaponProfiles[weapon] || this.weaponProfiles.default;
        const travelTime = target.distance / weaponProfile.bulletVelocity;
        
        // Dự đoán vị trí đầu chính xác
        const predictedHeadPos = {
            x: target.headHitbox.x + (target.movement.x * travelTime * 1.25),
            y: target.headHitbox.y + (target.movement.y * travelTime * 1.25)
        };
        
        // Áp dụng vùng headshot mở rộng 200%
        const headZoneSize = target.headHitboxSize * this.headshotAreaMultiplier;
        const headOffset = {
            x: (Math.random() * headZoneSize) - (headZoneSize / 2),
            y: (Math.random() * headZoneSize * 0.8) - (headZoneSize * 0.4)
        };
        
        // Hiệu chỉnh trọng lực
        const gravityComp = this.calculateGravityCompensation(target.distance, weaponProfile);
        
        return {
            x: predictedHeadPos.x + headOffset.x,
            y: predictedHeadPos.y + headOffset.y + gravityComp,
            z: target.headHitbox.z
        };
    }

    // CƠ CHẾ CHỐNG DÍNH NGỰC
    applyChestProtection(targetPos, currentPos, target) {
        const direction = {
            x: targetPos.x - currentPos.x,
            y: targetPos.y - currentPos.y
        };
        
        const distance = Math.max(1, target.distance);
        const distanceFactor = Math.min(1.8, 0.5 + (120 / distance));
        
        // Tính toán vị trí mục tiêu cuối cùng
        let finalPos = {
            x: currentPos.x + direction.x * distanceFactor,
            y: currentPos.y + direction.y * distanceFactor
        };
        
        // Phát hiện và hiệu chỉnh nếu dính vùng ngực
        const chestDistance = Math.sqrt(
            Math.pow(finalPos.x - target.chestHitbox.x, 2) +
            Math.pow(finalPos.y - target.chestHitbox.y, 2)
        );
        
        if (chestDistance < this.freeFireConfig.chestRadius * 1.2) {
            // Bù lực kéo lên đầu
            finalPos.y += this.freeFireConfig.headPriority * (target.headHitbox.y - target.chestHitbox.y) * 0.8;
        }
        
        // Chống overshoot
        finalPos.x = Math.min(target.headHitbox.x * 1.15, 
                          Math.max(target.headHitbox.x * 0.85, finalPos.x));
        finalPos.y = Math.min(target.headHitbox.y * 1.15, 
                          Math.max(target.headHitbox.y * 0.85, finalPos.y));
        
        return finalPos;
    }

    // CƠ CHẾ TẬP TRUNG ĐẠN
    calculateBulletConvergence(startPos, aimPos, target) {
        const convergenceFactor = 0.92; // Độ tập trung đạn
        const spreadReduction = 0.05; // Giảm độ phân tán
        
        return {
            start: startPos,
            end: {
                x: aimPos.x + (Math.random() * spreadReduction) - (spreadReduction/2),
                y: aimPos.y + (Math.random() * spreadReduction) - (spreadReduction/2)
            },
            convergence: convergenceFactor,
            guaranteedHeadshot: true
        };
    }

    // LỌC MỤC TIÊU THEO ĐỘ ƯU TIÊN HEADSHOT
    applyHeadPriorityFilter(targets, playerPos) {
        return targets
            .filter(target => target.isVisible && target.distance < 200)
            .map(target => {
                // Tính điểm ưu tiên headshot
                target.headPriorityScore = this.calculateHeadPriority(target, playerPos);
                return target;
            })
            .sort((a, b) => b.headPriorityScore - a.headPriorityScore);
    }

    // TÍNH ĐIỂM ƯU TIÊN HEADSHOT
    calculateHeadPriority(target, playerPos) {
        let score = 0;
        
        // Ưu tiên khoảng cách gần
        score += (200 - target.distance) * 0.5;
        
        // Ưu tiên kích thước đầu lớn
        score += target.headHitboxSize * 80;
        
        // Ưu tiên đối thủ di chuyển chậm
        score += (1.5 - Math.min(1.5, target.movementSpeed)) * 40;
        
        // Ưu tiên đối thủ đang nhảy/cúi
        if (target.isJumping) score += 25;
        if (target.isCrouching) score += 30;
        
        return score;
    }

    // CHỌN MỤC TIÊU HEADSHOT TỐI ƯU
    selectHeadPriorityTarget(targets) {
        if (targets.length === 0) return null;
        
        // Chọn mục tiêu có điểm ưu tiên cao nhất
        return targets.reduce((best, current) => 
            current.headPriorityScore > best.headPriorityScore ? current : best
        , targets[0]);
    }

    // HIỆU CHỈNH TRỌNG LỰC
    calculateGravityCompensation(distance, weaponProfile) {
        const time = distance / weaponProfile.bulletVelocity;
        return 0.5 * weaponProfile.gravity * Math.pow(time, 2) * 0.85;
    }

    // CẬP NHẬT LỊCH SỬ KHÓA
    updateLockHistory(targetId, position) {
        if (!this.targetHistory.has(targetId)) {
            this.targetHistory.set(targetId, []);
        }
        
        const history = this.targetHistory.get(targetId);
        history.push(position);
        
        if (history.length > 10) history.shift();
    }

    getSystemStatus() {
        return {
            version: "14.0",
            mode: "headshot_dominator",
            features: {
                headshotArea: `${this.headshotAreaMultiplier * 100}%`,
                autoLock: this.autoLockMode,
                chestProtection: this.chestStuckProtection,
                bulletConvergence: this.bulletConvergence
            },
            performance: {
                lockStrength: this.lockStrength,
                lockMaintainTime: this.lockMaintainTime
            },
            securityToken: this.sessionToken
        };
    }

    getDominatorWeaponProfiles() {
        return {
            "default": {bulletVelocity: 380, gravity: 9.8},
            "sniper": {bulletVelocity: 950, gravity: 9.78},
            "ak47": {bulletVelocity: 360, gravity: 9.8},
            "m4a1": {bulletVelocity: 400, gravity: 9.8},
            "shotgun": {bulletVelocity: 320, gravity: 9.83}
        };
    }
}

const aimSystem = new HeadshotDominator();
$done({ body: aimSystem.process($response.body) });
