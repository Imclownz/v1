// HEADSHOT MASTER PRO v9.0 (Sticky Head Lock)
class HeadshotMasterPro {
    constructor() {
        this.lockStrength = 0.9995;
        this.targetHistory = new Map();
        this.sessionToken = `HS_PRO_${Date.now().toString(36)}`;
        this.weaponProfiles = this.getPrecisionWeaponProfiles();
        this.lastLockTime = 0;
        this.aimStabilizer = 0.99;
        this.headshotAccuracy = 0.99;
        this.stickyFactor = 0.97;
        this.overshootCorrection = 1.0;
    }

    process(body) {
        try {
            const startTime = Date.now();
            const data = JSON.parse(body);
            
            if (data.gameState) this.updateCombatState(data.gameState);
            
            if (data.targets?.length > 0) {
                const enhancedTargets = this.enhanceTargets(data.targets, data.playerPosition, data.currentWeapon);
                const lockedTarget = this.selectOptimalTarget(enhancedTargets);
                
                if (lockedTarget) {
                    // Tính toán vị trí bắn chính xác với hiệu chỉnh overshoot
                    const perfectAim = this.calculatePrecisionAim(lockedTarget, data.playerPosition, data.currentWeapon);
                    
                    // Áp dụng công nghệ khóa dính đầu địch
                    data.aimPosition = this.applyStickyHeadLock(
                        perfectAim, 
                        data.currentAimPosition, 
                        lockedTarget,
                        data.gameState?.isFiring
                    );
                    
                    // Tăng cường ổn định khi khóa mục tiêu
                    if (this.lockStrength > 0.98) {
                        const stabilizationBoost = 2.4 - (lockedTarget.distance * 0.0005);
                        data.aimPosition = {
                            x: data.aimPosition.x * stabilizationBoost,
                            y: data.aimPosition.y * stabilizationBoost,
                            z: data.aimPosition.z * (stabilizationBoost * 0.98)
                        };
                    }
                    
                    this.lastLockTime = Date.now();
                }
                
                data.aimData = {
                    lockStrength: this.lockStrength,
                    headshotRate: this.headshotAccuracy,
                    processingTime: Date.now() - startTime
                };
            }
            
            data.aimSystem = {
                version: "Headshot-Master-9.0",
                mode: "sticky_head_lock",
                overshootCorrection: this.overshootCorrection
            };
            
            return JSON.stringify(data);
        } catch (e) {
            console.error("[HEADSHOT MASTER] Error:", e.message);
            return body;
        }
    }

    applyStickyHeadLock(targetPosition, currentPosition, target, isFiring) {
        const direction = {
            x: targetPosition.x - currentPosition.x,
            y: targetPosition.y - currentPosition.y,
            z: targetPosition.z - currentPosition.z
        };
        
        // Tính toán hệ số khóa dính
        const distanceFactor = Math.min(1.2, 100 / target.distance);
        const speedFactor = 1.1 - (Math.sqrt(target.movement.x**2 + target.movement.y**2) * 0.05);
        
        // Hiệu chỉnh overshoot
        const correction = this.overshootCorrection * (isFiring ? 0.96 : 1.0);
        
        return {
            x: currentPosition.x + (direction.x * distanceFactor * speedFactor * this.stickyFactor * correction),
            y: currentPosition.y + (direction.y * distanceFactor * speedFactor * this.stickyFactor * this.aimStabilizer * correction),
            z: currentPosition.z + (direction.z * distanceFactor * speedFactor * this.stickyFactor * 0.97 * correction)
        };
    }

    calculatePrecisionAim(target, playerPosition, weaponType) {
        let aimPosition = {
            x: target.headHitbox.x,
            y: target.headHitbox.y,
            z: target.headHitbox.z
        };
        
        // Hiệu chỉnh đạn đạo cho vũ khí tầm xa
        if (['sniper', 'dmr', 'ar'].includes(weaponType)) {
            const gravity = 9.8;
            const time = target.distance / this.weaponProfiles[weaponType].bulletVelocity;
            const drop = 0.5 * gravity * Math.pow(time, 2);
            aimPosition.y += drop;
        }
        
        // Tính toán hiệu chỉnh overshoot
        this.overshootCorrection = this.calculateOvershootCorrection(target.id);
        
        return aimPosition;
    }

    calculateOvershootCorrection(targetId) {
        const history = this.targetHistory.get(targetId);
        if (!history || history.positions.length < 3) return 1.0;
        
        let directionChanges = 0;
        for (let i = 2; i < history.positions.length; i++) {
            const dx1 = history.positions[i-1].x - history.positions[i-2].x;
            const dy1 = history.positions[i-1].y - history.positions[i-2].y;
            const dx2 = history.positions[i].x - history.positions[i-1].x;
            const dy2 = history.positions[i].y - history.positions[i-1].y;
            
            const angle1 = Math.atan2(dy1, dx1);
            const angle2 = Math.atan2(dy2, dx2);
            if (Math.abs(angle1 - angle2) > 0.5) {
                directionChanges++;
            }
        }
        
        const changeRate = directionChanges / (history.positions.length - 2);
        return Math.max(0.85, 1.0 - (changeRate * 0.3));
    }

    updateCombatState(gameState) {
        const timeSinceCombat = Date.now() - this.lastLockTime;
        
        if (gameState.isInCombat || timeSinceCombat < 2000) {
            this.lockStrength = Math.min(0.9995, 0.99 + (gameState.combatIntensity * 0.01));
        } else {
            this.lockStrength = Math.max(0.98, this.lockStrength - 0.002);
        }
        
        if (gameState.playerHealth < 30) {
            this.lockStrength = 0.9998;
            this.stickyFactor = 0.99;
            this.headshotAccuracy = 0.995;
        }
        
        this.aimStabilizer = 0.98 + (this.lockStrength * 0.01);
    }

    getPrecisionWeaponProfiles() {
        return {
            default: { bulletVelocity: 500 },
            sniper: { bulletVelocity: 1500 },
            ar: { bulletVelocity: 900 },
            ak47: { bulletVelocity: 870 },
            m4a1: { bulletVelocity: 930 }
        };
    }
}

const aimSystem = new HeadshotMasterPro();
$done({ body: aimSystem.process($response.body) });
